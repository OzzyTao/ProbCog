/* Generated By:JavaCC: Do not edit this line. FormulaParser.java */
package probcog.logic.parser;

import java.util.*;
import java.io.*;

import probcog.logic.*;

public @SuppressWarnings("all") class FormulaParser implements FormulaParserConstants {
        public static void main(String args[]) throws ParseException {
                String test;
                test = "foo(x,y) => !bar(x,zt) v baz(y)";
                test = "numberEats(o,2) <=> EXIST p, p2 (eats(o,p) ^ eats(o,p2) ^ !(o=p) ^ !(o=p2) ^ !(p=p2) ^ !(EXIST q (eats(o,q) ^ !(p=q) ^ !(p2=q))))";
                test = "foo(v) => bar(v)";
                Formula f = parse(test);
                System.out.println("formula: " + f);
        }

        public static Formula parse(String s) throws ParseException {
                FormulaParser parser = new FormulaParser(new StringReader(s));
                Formula f = parser.formula();
                Token t = parser.getNextToken();
                if(t.beginColumn != s.length())
                        throw new ParseException("Unexpected token '" + t.toString() + "'");
                return f;
        }

  final public String variable() throws ParseException {
                      Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCIDENT:
      t = jj_consume_token(LCIDENT);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                               {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String constant() throws ParseException {
                      Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UCIDENT:
      t = jj_consume_token(UCIDENT);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                   {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Collection<String> paramlist() throws ParseException {
        Collection<String> ret;
        String arg;
          ret = new Vector<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case LCIDENT:
      arg = variable();
      break;
    case NUMBER:
    case UCIDENT:
      arg = constant();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          ret.add(arg);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LISTSEP:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(LISTSEP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case LCIDENT:
        arg = variable();
        break;
      case NUMBER:
      case UCIDENT:
        arg = constant();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  ret.add(arg);
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Collection<String> varlist() throws ParseException {
        Collection<String> ret;
        String arg;
          ret = new Vector<String>();
    arg = variable();
          ret.add(arg);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LISTSEP:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(LISTSEP);
      arg = variable();
                  ret.add(arg);
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String predName() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCIDENT:
      t = jj_consume_token(LCIDENT);
      break;
    case UCIDENT:
      t = jj_consume_token(UCIDENT);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Atom atom() throws ParseException {
        Token t;
        String predName;
        Collection<String> params;
    predName = predName();
    jj_consume_token(OPENRB);
    params = paramlist();
    jj_consume_token(CLOSERB);
          {if (true) return new Atom(predName, params);}
    throw new Error("Missing return statement in function");
  }

  final public Literal literal() throws ParseException {
        Atom atom;
        boolean isTrue;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UCIDENT:
    case LCIDENT:
      atom = atom();
                  isTrue = true;
      break;
    case NOT:
      jj_consume_token(NOT);
      atom = atom();
                  isTrue = false;
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new Literal(isTrue, atom);}
    throw new Error("Missing return statement in function");
  }

  final public Negation negation() throws ParseException {
        Formula f;
    jj_consume_token(NOT);
    jj_consume_token(OPENRB);
    f = formula();
    jj_consume_token(CLOSERB);
          {if (true) return new Negation(f);}
    throw new Error("Missing return statement in function");
  }

  final public Exist exist() throws ParseException {
        Formula f;
        Collection<String> vars;
    jj_consume_token(EXIST);
    vars = varlist();
    jj_consume_token(OPENRB);
    f = formula();
    jj_consume_token(CLOSERB);
          {if (true) return new Exist(vars, f);}
    throw new Error("Missing return statement in function");
  }

  final public ForAll forall() throws ParseException {
        Formula f;
        Collection<String> vars;
    jj_consume_token(FORALL);
    vars = varlist();
    jj_consume_token(OPENRB);
    f = formula();
    jj_consume_token(CLOSERB);
          {if (true) return new ForAll(vars, f);}
    throw new Error("Missing return statement in function");
  }

  final public Equality equality() throws ParseException {
        String left, right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case LCIDENT:
      left = variable();
      break;
    case NUMBER:
    case UCIDENT:
      left = constant();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EQUALS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case LCIDENT:
      right = variable();
      break;
    case NUMBER:
    case UCIDENT:
      right = constant();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new Equality(left, right);}
    throw new Error("Missing return statement in function");
  }

  final public Formula formulaElement() throws ParseException {
        Formula f;
    if (jj_2_1(2147483647)) {
      f = negation();
    } else if (jj_2_2(2147483647)) {
      f = equality();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case UCIDENT:
      case LCIDENT:
        f = literal();
        break;
      case OPENRB:
        jj_consume_token(OPENRB);
        f = formula();
        jj_consume_token(CLOSERB);
        break;
      case EXIST:
        f = exist();
        break;
      case FORALL:
        f = forall();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Formula disjunction() throws ParseException {
        Formula f;
        Vector<Formula> children;
          children = new Vector<Formula>();
    f = formulaElement();
          children.add(f);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      f = formulaElement();
                  children.add(f);
    }
          {if (true) return children.size() > 1 ? new Disjunction(children) : f;}
    throw new Error("Missing return statement in function");
  }

  final public Formula conjunction() throws ParseException {
        Formula f;
        Vector<Formula> children;
          children = new Vector<Formula>();
    f = disjunction();
          children.add(f);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      f = disjunction();
                  children.add(f);
    }
          {if (true) return children.size() > 1 ? new Conjunction(children) : f;}
    throw new Error("Missing return statement in function");
  }

  final public Formula implication() throws ParseException {
        Formula f1, f2;
          f2 = null;
    f1 = conjunction();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLIES:
      jj_consume_token(IMPLIES);
      f2 = conjunction();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
          {if (true) return f2 == null ? f1 : new Implication(f1, f2);}
    throw new Error("Missing return statement in function");
  }

  final public Formula biimplication() throws ParseException {
        Formula f1, f2;
          f2 = null;
    f1 = implication();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IFF:
      jj_consume_token(IFF);
      f2 = implication();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
          {if (true) return f2 == null ? f1 : new Biimplication(f1, f2);}
    throw new Error("Missing return statement in function");
  }

  final public Formula formula() throws ParseException {
        Formula f;
    f = biimplication();
          {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(OPENRB)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    if (jj_scan_token(EQUALS)) return true;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_11()) return true;
    return false;
  }

  public FormulaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x400040,0x300000,0x700040,0x8000,0x700040,0x8000,0x600000,0x600020,0x700040,0x700040,0x603820,0x40,0x80,0x100,0x400,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public FormulaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public FormulaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FormulaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FormulaParser(FormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(FormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
